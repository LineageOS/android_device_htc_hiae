type mm-qcamerad, domain;
type mm-qcamerad_exec, exec_type, vendor_file_type, file_type;
init_daemon_domain(mm-qcamerad)

typeattribute mm-qcamerad data_between_core_and_vendor_violators;

# added to support EZTune for camera
userdebug_or_eng(`
  allow mm-qcamerad qti_debugfs:dir r_dir_perms;
  allow mm-qcamerad qti_debugfs:file read;
  allow mm-qcamerad camera_data_file:file create_file_perms;
  allow mm-qcamerad node:tcp_socket node_bind;

  # IMS use camera daemon to make VT call
  allow mm-qcamerad port:tcp_socket name_bind;
  allow mm-qcamerad self:tcp_socket { accept listen };

  # mm-qcamerad needs to set persist.camera. property
  set_prop(mm-qcamerad, camera_prop)
')

# Allow connections between sensor manager and mm-qcamerad
binder_call(mm-qcamerad, system_server);

# Interact with other media devices
allow mm-qcamerad { graphics_device video_device }:dir r_dir_perms;
allow mm-qcamerad { gpu_device graphics_device video_device }:chr_file rw_file_perms;

allow mm-qcamerad { surfaceflinger mediaserver cameraserver hal_camera }:fd use;

allow mm-qcamerad camera_data_file:dir w_dir_perms;

hal_client_domain(mm-qcamerad, hal_graphics_allocator)
allow mm-qcamerad ion_device:chr_file rw_file_perms;

allow mm-qcamerad self:socket create_socket_perms;
allowxperm mm-qcamerad self:socket ioctl msm_sock_ipc_ioctls;

type_transition mm-qcamerad camera_data_file:sock_file camera_socket "cam_socket1";
type_transition mm-qcamerad camera_data_file:sock_file camera_socket "cam_socket2";
allow mm-qcamerad camera_socket:sock_file { create unlink write };

r_dir_file(mm-qcamerad, sysfs_camera)
